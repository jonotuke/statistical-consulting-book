---
author: Jono Tuke
---

# Project structure

So welcome to the opinionated chapter on project structure. First a comment, I am not stating that this is the only way to organise a project, feel free to have your own system, as long as you have a system. This is my system as I write. It will change as I learn from my mistakes. What I want you to do is not follow it slavishly, but thing about the underlying principles and how you want to implement them. 

## Why a project structure? 
So first the why. Why do you need a project structure? Well, as you become more experienced as a statistical consultant, then you will get more and more projects. This creates two problems: 

1. You may be working on more than one project at a time, and you need to be able to move between them cleanly. 
2. You may not come back to a project for many months. The longest so far for me returning to a previous analysis was 10 years.

In both cases, having a simple standard structure, means that you can get upto speed easily. This gives us stats consulting Rule 1

::: {.callout-tip}
# Stats consulting Rule 1
- Be organised to look after future you. 
:::

In the following, I will outline how to set up your folder stucture in R, and also guidance on why I use this structure. 


## Setting up a project stucture in R

First we will set up the project using the `usethis` package: 

```{r}
#| eval: false
#| echo: true
usethis::create_project("~/Desktop/2025-penguin-analysis")
```

So a couple of things to notice, with my naming of the project, in this case

```
2025-penguin-analysis
```

First I have given the year that I did the analysis. This is useful, I have a massive archive of my previous analysis stored online, and it is often easiest to indentify when the analysis was done from previous emails with the collaborator. Once I have the year, then this reduces my search space. Next, I try to give it a memorable name to remind me of the analysis. In this case, we will assume that we are analysing the [Palmer penguins dataset](https://allisonhorst.github.io/palmerpenguins/) - this should be rememberable enough. I will also show you later how to add this info into your reports in @sec-readme. 

So before we create any more of the structure, lets consider our goal- think self-contained (@fig-kei-tora). In the Kei-tora gardening contest, the contestents make a self-contained garden on the back of a trailer. Replace garden with analysis and trailer with folder. You should be able to send your folder to a colleague and they can reproduce your analysis. Nothing missing. 

```{r}
#| fig-cap: The Kei-tora gardening contest
#| label: fig-kei-tora
knitr::include_graphics(here::here("figs", "kei-tora.png"))
```

So now we are going to add some sub-folders for out analysis:

```{r}
#| eval: false
#| echo: true
fs::dir_create("raw-data")
fs::dir_create("data")

fs::dir_create("figs")
fs::dir_create("tabs")

fs::dir_create("r-code")

fs::dir_create("reports")
```

So, let's break down these subfolders. 

First, notice that I have two subfolders for data:

- `raw-data`, and 
- `data`. 

The subfolder `raw-data` is for the data that I get from the collaborator - this is dated and named (@sec-name-files) and is then left alone. I can read it into R, but I do not change it. I repeat: I. Do. Not. Change. It. You will be tempted, a quick adjustment will make your like easier. If you need to do this, then you change it, save the new file in the subfolder `data` and record what you did in your README file (more about this later @sec-readme). Our goal is to make our analysis reproducible and open - unrecorded tinkering of data is neither. 

The subfolder `data` is for any data structure that you make yourself. While we are talking about data. Let's talk about `.RData`:

::: {.callout-tip}
# Rant 1: Stop using .RData
Do not save `.RData` when you quit R and do not load `.RData` when you fire up R. The data you use in your analysis should be purposely loaded by you, not left as a side-effect. 
:::

The next two subfolders are `figs` and `tabs`. These are for all of the figures and tables from the analysis. I keep these seperate so that I can keep them easily, and also it makes it easy to share with the collaborators. 

So now we get to some code file, these are put in the subfolder `r-code`. If I have python code, then we have a subfolder `py-code`, and a subfolder for julia: `julia-code`. I like to keep these seperate, but it is not necessary. 

The next and final subfolder for now is `reports`. This is where I write my reports for the collaborator. 


Now we have some subfolders, we can now populate them with some files. So lets talk about naming files. 

## Naming things {#sec-name-files}
It is a good idea to keep you file names informative. Here are some guidelines for different types of files. 

**Data**: So all data I receive is given a name of the form

```{r}
#| eval: false
2025-02-25-penguin-data.xlsx
```

So let's break this down. First the filename starts with a date entry of the form

```{r}
#| eval: false
year-month-day
```

This is so that the files are ordered in my folder structure, so that at a glance I can work out which is the latest files. 

**Analysis**: If I decide to not use targets (@sec-targets), then I will name my analysis files in the order they should be run, and also informative about what they do

```{r}
#| eval: false
01-read-in-penguin-data.R
02-clean-penguin-data.R
03-fit-log-reg-penguin.R
```

Again, this is so that in the future if I get new data or change an analysis, then I can see the dependencies and know what needs to be rerun. 
 
::: {.callout-tip}
# HERE::HERE
So you are going to start worrying about all these subfolders and working directories. Well worry no more, as we are going to use projects, then we can use the ever so useful

```{r}
#| eval: false
here::here()
```

command. 

What does it do, just give the place in your directory where your project is

```{r}
here::here()
```

So if you want your data file in the `raw-data` folder, then you can use

```{r}
here::here("raw-data", "2025-02-25-penguin-data.xlsx")
```

Move your project to somewhere else in your computer - it will still work. 
:::

## README file {#sec-readme}
## HERE  

```{r}
# fs::dir_tree()
```
